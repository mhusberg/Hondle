{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mats\\\\Projects\\\\Hondle\\\\hondle\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport heroesData from './heroes.json';\nimport HeroSearchBar from './components/HeroSearchBar';\nimport PropertiesRow from './components/PropertiesRow';\nimport PropertiesHeader from './components/PropertiesHeader';\nimport InfoBox from './components/InfoBox';\nimport Button from 'react-bootstrap/Button';\nimport DisplayConfetti from './components/Confetti';\nimport { getHeroOfTheDay } from './helpers/TimerHashFunction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst heroes = heroesData.map(hero => ({\n  ...hero,\n  Gender: hero.Gender,\n  Attribute: hero.Attribute,\n  // Asserting the correct type for Attribute\n  Role: hero.Role,\n  // Asserting the correct type for Role\n  Side: hero.Side,\n  // Asserting the correct type for Side\n  RangeType: hero.RangeType,\n  // Asserting the correct type for RangeType\n  Complexity: hero.Complexity // Asserting the correct type for Complexity\n}));\n\n// Sample list of heroes from Heroes of Newerth\n// const heroess = ['Accursed', 'Aluna', 'Arachna', 'Artillery', 'Balphagore', 'Behemoth', 'Blacksmith', 'Bombardier', 'Bramble', 'Bubbles', 'Cthulhuphant', 'Demented Shaman', 'Devourer', 'Doctor Repulsor', 'Draconis', 'Empath', 'Engineer', 'Fayde', 'Flux', 'Forsaken Archer', 'Gauntlet', 'Geomancer', 'Glacius', 'Gravekeeper', 'Gunblade', 'Hellbringer', 'Keeper of the Forest', 'Kinesis', 'Kraken', 'Lodestone', 'Lord Salforis', 'Magmus', 'Martyr', 'Master of Arms', 'Midas', 'Moon Queen', 'Monarch', 'Moraxus', 'Myrmidon', 'Nighthound', 'Nitro', 'Nomad', 'Oogie', 'Parallax', 'Pandamonium', 'Pebbles', 'Pharaoh', 'Plague Rider', 'Pollywog Priest', 'Predator', 'Puppet Master', 'Pyromancer', 'Rally', 'Ravenor', 'Revenant', 'Rhapsody', 'Sand Wraith', 'Scout', 'Silhouette', 'Sir Benzington', 'Soulstealer', 'Swiftblade', 'Tarot', 'Tempest', 'The Gladiator', 'The Madman', 'Thunderbringer', 'Tremble', 'Tundra', 'Valkyrie', 'Vindicator', 'Voodoo Jester', 'War Beast', 'Wildsoul', 'Witch Slayer', 'Zephyr'];\n\nconst App = () => {\n  _s();\n  const [guess, setGuess] = useState('');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [remainingHeroes, setGuessedHistoryList] = useState(heroes);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [wonGame, setWonGame] = useState(false);\n  const targetHero = useRef({});\n  useEffect(() => {\n    targetHero.current = getHeroOfTheDay(new Date(), heroes);\n  }, []);\n  const handleGuessChange = value => {\n    const searchTerm = value.trim();\n    setGuess(searchTerm);\n  };\n  const handleGuessSubmit = event => {\n    event.preventDefault();\n    const guessedHero = guess.trim();\n    const guessedHeroObject = heroes.find(hero => hero.Name.toLowerCase() === guessedHero.toLowerCase());\n    if (!guessedHeroObject) {\n      return;\n    }\n    const isHeroInGuessHistory = guessHistory.some(hero => hero.Name === guessedHeroObject.Name);\n    if (isHeroInGuessHistory) {\n      return;\n    }\n    const isCorrect = guessedHeroObject.Name.toUpperCase() === targetHero.current.Name.toUpperCase();\n    const updatedGuessHistory = [...guessHistory, guessedHeroObject];\n    setGuessHistory(updatedGuessHistory);\n    if (isCorrect) {\n      setWonGame(true);\n    } else {\n      setGuessedHistoryList(remainingHeroes.filter(item => item.Name !== guess));\n    }\n  };\n  const handleInputReset = () => {\n    setInputValue(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(DisplayConfetti, {\n        run: wonGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"hon-logo\",\n        alt: \"\",\n        src: \"./images/HoN_logo.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleGuessSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hero-searchbar\",\n          children: /*#__PURE__*/_jsxDEV(HeroSearchBar, {\n            onSelect: handleGuessChange,\n            value: inputValue,\n            setValue: setInputValue,\n            heroes: remainingHeroes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: wonGame,\n          className: \"btn my-3\",\n          variant: \"success\",\n          type: \"submit\",\n          onClick: handleInputReset,\n          children: \"Guess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n        guesses: guessHistory.length,\n        finished: wonGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PropertiesHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), guessHistory.map((hero, index) => /*#__PURE__*/_jsxDEV(PropertiesRow, {\n        hero: hero,\n        targetHero: targetHero.current\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"qxuaZouslk2jkiTXhLjr9ujobQ4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","heroesData","HeroSearchBar","PropertiesRow","PropertiesHeader","InfoBox","Button","DisplayConfetti","getHeroOfTheDay","jsxDEV","_jsxDEV","heroes","map","hero","Gender","Attribute","Role","Side","RangeType","Complexity","App","_s","guess","setGuess","guessHistory","setGuessHistory","remainingHeroes","setGuessedHistoryList","inputValue","setInputValue","wonGame","setWonGame","targetHero","current","Date","handleGuessChange","value","searchTerm","trim","handleGuessSubmit","event","preventDefault","guessedHero","guessedHeroObject","find","Name","toLowerCase","isHeroInGuessHistory","some","isCorrect","toUpperCase","updatedGuessHistory","filter","item","handleInputReset","className","children","run","fileName","_jsxFileName","lineNumber","columnNumber","alt","src","onSubmit","onSelect","setValue","disabled","variant","type","onClick","guesses","length","finished","index","_c","$RefreshReg$"],"sources":["C:/Users/Mats/Projects/Hondle/hondle/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport heroesData from './heroes.json'\r\nimport HeroSearchBar from './components/HeroSearchBar';\r\nimport PropertiesRow from './components/PropertiesRow';\r\nimport PropertiesHeader from './components/PropertiesHeader';\r\nimport InfoBox from './components/InfoBox';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DisplayConfetti from './components/Confetti';\r\nimport { getHeroOfTheDay } from './helpers/TimerHashFunction';\r\n\r\n\r\nexport type Hero = {\r\n  Name: string,\r\n  Gender: string,\r\n  Attribute: string,\r\n  Role: string,\r\n  Side: string,\r\n  RangeType: string,\r\n  Complexity: string,\r\n  ImagePath: string\r\n}\r\n\r\nconst heroes: Hero[] = heroesData.map((hero) => ({\r\n  ...hero,\r\n  Gender: hero.Gender as Hero['Gender'],\r\n  Attribute: hero.Attribute as Hero['Attribute'], // Asserting the correct type for Attribute\r\n  Role: hero.Role as Hero['Role'], // Asserting the correct type for Role\r\n  Side: hero.Side as Hero['Side'], // Asserting the correct type for Side\r\n  RangeType: hero.RangeType as Hero['RangeType'], // Asserting the correct type for RangeType\r\n  Complexity: hero.Complexity as Hero['Complexity'], // Asserting the correct type for Complexity\r\n}));\r\n\r\n\r\n// Sample list of heroes from Heroes of Newerth\r\n// const heroess = ['Accursed', 'Aluna', 'Arachna', 'Artillery', 'Balphagore', 'Behemoth', 'Blacksmith', 'Bombardier', 'Bramble', 'Bubbles', 'Cthulhuphant', 'Demented Shaman', 'Devourer', 'Doctor Repulsor', 'Draconis', 'Empath', 'Engineer', 'Fayde', 'Flux', 'Forsaken Archer', 'Gauntlet', 'Geomancer', 'Glacius', 'Gravekeeper', 'Gunblade', 'Hellbringer', 'Keeper of the Forest', 'Kinesis', 'Kraken', 'Lodestone', 'Lord Salforis', 'Magmus', 'Martyr', 'Master of Arms', 'Midas', 'Moon Queen', 'Monarch', 'Moraxus', 'Myrmidon', 'Nighthound', 'Nitro', 'Nomad', 'Oogie', 'Parallax', 'Pandamonium', 'Pebbles', 'Pharaoh', 'Plague Rider', 'Pollywog Priest', 'Predator', 'Puppet Master', 'Pyromancer', 'Rally', 'Ravenor', 'Revenant', 'Rhapsody', 'Sand Wraith', 'Scout', 'Silhouette', 'Sir Benzington', 'Soulstealer', 'Swiftblade', 'Tarot', 'Tempest', 'The Gladiator', 'The Madman', 'Thunderbringer', 'Tremble', 'Tundra', 'Valkyrie', 'Vindicator', 'Voodoo Jester', 'War Beast', 'Wildsoul', 'Witch Slayer', 'Zephyr'];\r\n\r\nconst App = () => {\r\n  const [guess, setGuess] = useState('');\r\n  const [guessHistory, setGuessHistory] = useState<Hero[]>([]);\r\n  const [remainingHeroes, setGuessedHistoryList] = useState<Hero[]>(heroes);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [wonGame, setWonGame] = useState<boolean>(false);\r\n  const targetHero = useRef({} as Hero);\r\n   useEffect(() => {\r\n    targetHero.current = getHeroOfTheDay(new Date(), heroes)\r\n  },[])\r\n\r\n  const handleGuessChange = (value: string) => {\r\n    const searchTerm = value.trim();\r\n    setGuess(searchTerm);\r\n  };\r\n\r\n  const handleGuessSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const guessedHero = guess.trim();\r\n    const guessedHeroObject = heroes.find(hero => hero.Name.toLowerCase() === guessedHero.toLowerCase());\r\n  \r\n    if (!guessedHeroObject) {\r\n      return;\r\n    }\r\n\r\n    const isHeroInGuessHistory = guessHistory.some(hero => hero.Name === guessedHeroObject.Name);\r\n    if (isHeroInGuessHistory) {\r\n      return;\r\n    }\r\n\r\n    const isCorrect = guessedHeroObject.Name.toUpperCase() === targetHero.current.Name.toUpperCase();\r\n    const updatedGuessHistory = [...guessHistory, guessedHeroObject];\r\n    setGuessHistory(updatedGuessHistory);\r\n  \r\n    if (isCorrect) {\r\n      setWonGame(true);\r\n    } else {\r\n      setGuessedHistoryList(remainingHeroes.filter(item => item.Name !== guess));\r\n    }\r\n  };\r\n\r\nconst handleInputReset = () => {\r\n  setInputValue(\"\");\r\n};\r\n\r\n  return (\r\n    <div className=\"bg\">\r\n      <div className=\"App\">\r\n          <DisplayConfetti run={wonGame}/>\r\n          <img className=\"hon-logo\" alt=\"\" src=\"./images/HoN_logo.png\"></img>\r\n          <form onSubmit={handleGuessSubmit}>\r\n            <div className=\"hero-searchbar\">\r\n              <HeroSearchBar onSelect={handleGuessChange} value={inputValue} setValue={setInputValue} heroes={remainingHeroes}></HeroSearchBar>\r\n            </div>\r\n            <Button disabled={wonGame} className=\"btn my-3\" variant=\"success\" type=\"submit\" onClick={handleInputReset}>Guess</Button>\r\n          </form>\r\n          <InfoBox guesses={guessHistory.length} finished={wonGame}></InfoBox>\r\n        <PropertiesHeader></PropertiesHeader>\r\n        {guessHistory.map((hero, index) => (\r\n          <PropertiesRow key={index} hero={hero} targetHero={targetHero.current}></PropertiesRow>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}