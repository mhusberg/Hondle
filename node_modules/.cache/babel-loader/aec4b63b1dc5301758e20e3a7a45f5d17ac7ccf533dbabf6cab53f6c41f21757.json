{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mats\\\\Projects\\\\Hondle\\\\hondle\\\\src\\\\components\\\\PropertiesRow.tsx\";\nimport PropertiesCard from '../components/PropertiesCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PropertiesRow = ({\n  hero,\n  targetHero\n}) => {\n  var genderClass = \"fail\";\n  if (hero.Gender === targetHero.Gender) {\n    genderClass = \"success\";\n  }\n  var attributeClass = \"fail\";\n  if (hero.Attribute === targetHero.Attribute) {\n    attributeClass = \"success\";\n  }\n  var roleClass = \"fail\";\n  const heroRoles = hero.Role.split(\" \");\n  const targetHeroRoles = targetHero.Role.split(\" \");\n  if (hero.Role === targetHero.Role) {\n    roleClass = \"success\";\n  } else if (heroRoles.some(role => targetHeroRoles.includes(role))) {\n    roleClass = \"partial\";\n  }\n  var sideClass = \"fail\";\n  if (hero.Side === targetHero.Side) {\n    sideClass = \"success\";\n  }\n  var rangeTypeClass = \"fail\";\n  if (hero.RangeType === targetHero.RangeType) {\n    rangeTypeClass = \"success\";\n  }\n  var complexityClass = \"fail\";\n  if (hero.Complexity === targetHero.Complexity) {\n    complexityClass = \"success\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"properties-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"hero-img-row\",\n      src: hero.ImagePath,\n      alt: hero.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PropertiesCard, {\n      content: hero.Gender,\n      colorClass: genderClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PropertiesCard, {\n      content: hero.Attribute,\n      colorClass: attributeClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PropertiesCard, {\n      content: hero.Role,\n      colorClass: roleClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PropertiesCard, {\n      content: hero.Side,\n      colorClass: sideClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PropertiesCard, {\n      content: hero.RangeType,\n      colorClass: rangeTypeClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PropertiesCard, {\n      content: hero.Complexity,\n      colorClass: complexityClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_c = PropertiesRow;\nexport default PropertiesRow;\nvar _c;\n$RefreshReg$(_c, \"PropertiesRow\");","map":{"version":3,"names":["PropertiesCard","jsxDEV","_jsxDEV","PropertiesRow","hero","targetHero","genderClass","Gender","attributeClass","Attribute","roleClass","heroRoles","Role","split","targetHeroRoles","some","role","includes","sideClass","Side","rangeTypeClass","RangeType","complexityClass","Complexity","className","children","src","ImagePath","alt","Name","fileName","_jsxFileName","lineNumber","columnNumber","content","colorClass","_c","$RefreshReg$"],"sources":["C:/Users/Mats/Projects/Hondle/hondle/src/components/PropertiesRow.tsx"],"sourcesContent":["import PropertiesCard from '../components/PropertiesCard';\r\nimport { Hero } from '../App';\r\n\r\n\r\nconst PropertiesRow = ({hero, targetHero}:{\r\n    hero: Hero;\r\n    targetHero: Hero;\r\n}) => {\r\n\r\n    var genderClass = \"fail\";\r\n    if (hero.Gender === targetHero.Gender) {\r\n        genderClass = \"success\";\r\n    }\r\n\r\n    var attributeClass = \"fail\";\r\n    if (hero.Attribute === targetHero.Attribute) {\r\n        attributeClass = \"success\";\r\n    }\r\n\r\n    var roleClass = \"fail\";\r\n    const heroRoles = hero.Role.split(\" \");\r\n    const targetHeroRoles = targetHero.Role.split(\" \");\r\n    if (hero.Role === targetHero.Role) {\r\n        roleClass = \"success\";\r\n    } else if (heroRoles.some(role => targetHeroRoles.includes(role))) {\r\n        roleClass = \"partial\";\r\n    }\r\n\r\n    var sideClass = \"fail\";\r\n    if (hero.Side === targetHero.Side) {\r\n        sideClass = \"success\";\r\n    }\r\n\r\n    var rangeTypeClass = \"fail\";\r\n    if (hero.RangeType === targetHero.RangeType) {\r\n        rangeTypeClass = \"success\";\r\n    }\r\n\r\n    var complexityClass = \"fail\";\r\n    if (hero.Complexity === targetHero.Complexity) {\r\n        complexityClass = \"success\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"properties-row\">\r\n            <img className=\"hero-img-row\" src={hero.ImagePath} alt={hero.Name}/>\r\n            <PropertiesCard content={hero.Gender} colorClass={genderClass}></PropertiesCard>\r\n            <PropertiesCard content={hero.Attribute} colorClass={attributeClass}></PropertiesCard>\r\n            <PropertiesCard content={hero.Role} colorClass={roleClass}></PropertiesCard>\r\n            <PropertiesCard content={hero.Side} colorClass={sideClass}></PropertiesCard>\r\n            <PropertiesCard content={hero.RangeType} colorClass={rangeTypeClass}></PropertiesCard>\r\n            <PropertiesCard content={hero.Complexity} colorClass={complexityClass}></PropertiesCard>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PropertiesRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}